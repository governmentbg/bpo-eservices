package eu.ohim.sp.core.fee.provided;

import eu.ohim.sp.core.fee.FeeCalculationService;
import eu.ohim.sp.external.domain.epayment.Fee;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import sun.misc.BASE64Decoder;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.when;

/**
 * Created by marcoantonioalberoalbero on 7/11/16.
 */
public class DefaultFeeCalculationTest {

    @Mock
    FeeCalculationService feeCalculationService;

    @Mock
    InitialContext ic;

    @InjectMocks
    DefaultFeeCalculation feeCalculation;

    /* base64 application.xml representation (eservices tm-renewal)*/
    String app = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48bnMyOlRyYW5zYWN0aW9uIHhtbG5zOm5zMj0iaHR0cDovL2ZzcC5vaGltLmV1L1hNTFNjaGVtYSI+CjxUcmFuc2FjdGlvbkhlYWRlcj4KPFNlbmRlckRldGFpbHM+CjxSZXF1ZXN0WFNEVmVyc2lvbj4yLjA8L1JlcXVlc3RYU0RWZXJzaW9uPgo8L1NlbmRlckRldGFpbHM+CjwvVHJhbnNhY3Rpb25IZWFkZXI+CjxUcmFkZU1hcmtUcmFuc2FjdGlvbkJvZHk+CjxUcmFuc2FjdGlvbkNvbnRlbnREZXRhaWxzPgo8VHJhbnNhY3Rpb25Db2RlPlRyYWRlIE1hcmsgRS1GaWxpbmc8L1RyYW5zYWN0aW9uQ29kZT4KPFRyYW5zYWN0aW9uRGF0YT4KPFRyYWRlTWFya1NlcnZpY2VzQXBwbGljYXRpb24+CjxSZXF1ZXN0U29mdHdhcmU+CjxSZXF1ZXN0U29mdHdhcmVOYW1lPmUtU2VydmljZXM8L1JlcXVlc3RTb2Z0d2FyZU5hbWU+CjxSZXF1ZXN0U29mdHdhcmVWZXJzaW9uPjAuMDE8L1JlcXVlc3RTb2Z0d2FyZVZlcnNpb24+CjwvUmVxdWVzdFNvZnR3YXJlPgo8QXBwbGljYXRpb25Gb3JtTmFtZT5UTV9SRU5FV0FMPC9BcHBsaWNhdGlvbkZvcm1OYW1lPgo8UGF5bWVudERldGFpbHM+CjxQYXltZW50Pgo8UGF5bWVudFN0YXR1cz5VbmRlZmluZWQ8L1BheW1lbnRTdGF0dXM+CjxQYXltZW50RmVlRGV0YWlscz4KPFBheW1lbnRGZWU+CjxGZWVSZWZlcmVuY2U+YmFzaWNGZWU8L0ZlZVJlZmVyZW5jZT4KPEZlZUFtb3VudD4xOTEuNzM8L0ZlZUFtb3VudD4KPC9QYXltZW50RmVlPgo8L1BheW1lbnRGZWVEZXRhaWxzPgo8UGF5ZXJBZGRyZXNzQm9vaz4KPE90aGVySW5kaWNhdG9yPmZhbHNlPC9PdGhlckluZGljYXRvcj4KPC9QYXllckFkZHJlc3NCb29rPgo8L1BheW1lbnQ+CjwvUGF5bWVudERldGFpbHM+CjxBcHBsaWNhdGlvbkZpbGluZ051bWJlcj5FRkVNMjAxNjAwMDAwMDAxMDU5PC9BcHBsaWNhdGlvbkZpbGluZ051bWJlcj4KPFJlY2VpdmluZ09mZmljZUNvZGU+RU08L1JlY2VpdmluZ09mZmljZUNvZGU+CjxBcHBsaWNhdGlvbkxhbmd1YWdlQ29kZT5lbjwvQXBwbGljYXRpb25MYW5ndWFnZUNvZGU+CjxUcmFkZU1hcmtEZXRhaWxzPgo8VHJhZGVNYXJrPgo8QXBwbGljYXRpb25OdW1iZXI+MjM0PC9BcHBsaWNhdGlvbk51bWJlcj4KPEFwcGxpY2F0aW9uRGF0ZT4yMDE2LTExLTA3PC9BcHBsaWNhdGlvbkRhdGU+CjxSZWdpc3RyYXRpb25OdW1iZXI+MjM0PC9SZWdpc3RyYXRpb25OdW1iZXI+CjxSZWdpc3RyYXRpb25EYXRlPjIwMTYtMTEtMDc8L1JlZ2lzdHJhdGlvbkRhdGU+CjxFeHBpcnlEYXRlPjIwMTYtMTEtMTA8L0V4cGlyeURhdGU+CjxNYXJrQ3VycmVudFN0YXR1c0NvZGU+UmVnaXN0ZXJlZDwvTWFya0N1cnJlbnRTdGF0dXNDb2RlPgo8S2luZE1hcms+SW5kaXZpZHVhbDwvS2luZE1hcms+CjxNYXJrRmVhdHVyZT5VbmRlZmluZWQ8L01hcmtGZWF0dXJlPgo8VHJhZGVEaXN0aW5jdGl2ZW5lc3NJbmRpY2F0b3I+ZmFsc2U8L1RyYWRlRGlzdGluY3RpdmVuZXNzSW5kaWNhdG9yPgo8V29yZE1hcmtTcGVjaWZpY2F0aW9uPgo8TWFya1ZlcmJhbEVsZW1lbnRUZXh0PmFzZDwvTWFya1ZlcmJhbEVsZW1lbnRUZXh0Pgo8L1dvcmRNYXJrU3BlY2lmaWNhdGlvbj4KPEFwcGxpY2FudERldGFpbHM+CjxBcHBsaWNhbnQ+CjxBcHBsaWNhbnRJZGVudGlmaWVyIGlkZW50aWZpZXJLaW5kQ29kZT0iQ29tcGFueSBOdW1iZXIiLz4KPEFwcGxpY2FudElkZW50aWZpZXIgaWRlbnRpZmllcktpbmRDb2RlPSJWQVQgTnVtYmVyIi8+CjxBcHBsaWNhbnRJZGVudGlmaWVyIGlkZW50aWZpZXJLaW5kQ29kZT0iVGF4IE9mZmljZSIvPgo8QXBwbGljYW50RG9taWNpbGVMb2NhbGl0eT5hc2RmPC9BcHBsaWNhbnREb21pY2lsZUxvY2FsaXR5Pgo8QXBwbGljYW50QWRkcmVzc0Jvb2s+CjxGb3JtYXR0ZWROYW1lQWRkcmVzcz4KPE5hbWU+CjxGb3JtYXR0ZWROYW1lPgo8T3JnYW5pemF0aW9uTmFtZT5zYWY8L09yZ2FuaXphdGlvbk5hbWU+CjwvRm9ybWF0dGVkTmFtZT4KPE5hbWVLaW5kPkxlZ2FsIEVudGl0eTwvTmFtZUtpbmQ+CjwvTmFtZT4KPC9Gb3JtYXR0ZWROYW1lQWRkcmVzcz4KPE90aGVySW5kaWNhdG9yPmZhbHNlPC9PdGhlckluZGljYXRvcj4KPC9BcHBsaWNhbnRBZGRyZXNzQm9vaz4KPEFwcGxpY2FudElzT3duZXI+ZmFsc2U8L0FwcGxpY2FudElzT3duZXI+CjwvQXBwbGljYW50Pgo8L0FwcGxpY2FudERldGFpbHM+CjxOdW1iZXJPZlJlbmV3YWxzPjA8L051bWJlck9mUmVuZXdhbHM+CjwvVHJhZGVNYXJrPgo8L1RyYWRlTWFya0RldGFpbHM+CjxNYXJrUmVjb3JkRGV0YWlscz4KPE1hcmtSZWNvcmQ+CjxCYXNpY1JlY29yZD4KPFRyYWRlTWFya0tleURldGFpbHM+CjxUcmFkZU1hcmtLZXk+CjxJZGVudGlmaWVyIGlkZW50aWZpZXJLaW5kQ29kZT0iQXBwbGljYXRpb24gTnVtYmVyIj4yMzQ8L0lkZW50aWZpZXI+CjwvVHJhZGVNYXJrS2V5Pgo8L1RyYWRlTWFya0tleURldGFpbHM+CjxHb29kc1NlcnZpY2VzTGltaXRhdGlvbkRldGFpbHM+CjxHb29kc1NlcnZpY2VzTGltaXRhdGlvbj4KPExpbWl0YXRpb25DbGFzc0Rlc2NyaXB0aW9uRGV0YWlscz4KPENsYXNzRGVzY3JpcHRpb24+CjxDbGFzc051bWJlcj4xPC9DbGFzc051bWJlcj4KPENsYXNzaWZpY2F0aW9uVGVybURldGFpbHM+CjxDbGFzc2lmaWNhdGlvblRlcm0+CjxDbGFzc2lmaWNhdGlvblRlcm1UZXh0PmFzZGY8L0NsYXNzaWZpY2F0aW9uVGVybVRleHQ+CjxDbGFzc2lmaWNhdGlvblRlcm1Bc3Nlc3NtZW50PlRlcm0gbm90IGZvdW5kPC9DbGFzc2lmaWNhdGlvblRlcm1Bc3Nlc3NtZW50Pgo8L0NsYXNzaWZpY2F0aW9uVGVybT4KPENsYXNzaWZpY2F0aW9uVGVybUxhbmd1YWdlQ29kZT5lbjwvQ2xhc3NpZmljYXRpb25UZXJtTGFuZ3VhZ2VDb2RlPgo8L0NsYXNzaWZpY2F0aW9uVGVybURldGFpbHM+CjxGdWxsQ2xhc3NDb3ZlcmFnZUluZGljYXRvcj5mYWxzZTwvRnVsbENsYXNzQ292ZXJhZ2VJbmRpY2F0b3I+CjwvQ2xhc3NEZXNjcmlwdGlvbj4KPC9MaW1pdGF0aW9uQ2xhc3NEZXNjcmlwdGlvbkRldGFpbHM+CjwvR29vZHNTZXJ2aWNlc0xpbWl0YXRpb24+CjwvR29vZHNTZXJ2aWNlc0xpbWl0YXRpb25EZXRhaWxzPgo8UmVjb3JkRXh0ZW50PlBhcnRpYWwgZ29vZHMgYW5kIHNlcnZpY2VzPC9SZWNvcmRFeHRlbnQ+CjwvQmFzaWNSZWNvcmQ+CjwvTWFya1JlY29yZD4KPC9NYXJrUmVjb3JkRGV0YWlscz4KPC9UcmFkZU1hcmtTZXJ2aWNlc0FwcGxpY2F0aW9uPgo8L1RyYW5zYWN0aW9uRGF0YT4KPC9UcmFuc2FjdGlvbkNvbnRlbnREZXRhaWxzPgo8L1RyYWRlTWFya1RyYW5zYWN0aW9uQm9keT4KPC9uczI6VHJhbnNhY3Rpb24+Cg==";

    @Before
    public void setup() throws NamingException {
        MockitoAnnotations.initMocks(this);
        when(ic.lookup(anyString())).thenReturn(feeCalculationService);
        eu.ohim.sp.core.domain.payment.Fee f = new eu.ohim.sp.core.domain.payment.Fee();
        List<eu.ohim.sp.core.domain.payment.Fee> feelist = new ArrayList<>();
        feelist.add(f);
        feeCalculation.init();
        Mockito.when(feeCalculationService.calculateFees(Mockito.any(), Mockito.any())).thenReturn(feelist);
    }

    @Test
    public void calculateFeeTest() throws IOException, FeeFault_Exception {
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] application = decoder.decodeBuffer(app);
        List<Fee> fees = feeCalculation.calculateApplicationFees("tm-renewal", application);
        Assert.assertNotNull(fees);
    }
}

package org.domain.rules;

dialect "mvel"

import eu.ohim.sp.core.domain.validation.ErrorCore;
import eu.ohim.sp.core.domain.validation.ErrorList;
import eu.ohim.sp.core.domain.trademark.TradeMark;
import eu.ohim.sp.core.domain.trademark.MarkKind;
import eu.ohim.sp.core.domain.validation.RulesInformation;
import eu.ohim.sp.core.domain.payment.FeeList;
import eu.ohim.sp.core.domain.payment.FeeType;
import eu.ohim.sp.core.domain.payment.Fee;
import eu.ohim.sp.core.domain.resources.DocumentKind;
import eu.ohim.sp.core.domain.resources.Document;
import java.util.Map;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.List;
import java.text.DecimalFormat;
import org.apache.log4j.Logger;

rule "Map creator"
salience 1100
no-loop
    when
        # This rule has no WHEN. Is always triggered
    then
		# Inserts a new TreeMap in the session
        insert(new TreeMap());
end

rule "Fees reader"
salience 1000
no-loop
    when
		FeeList($feeTypeList : feeTypeList)
        $map : TreeMap()
        $bF : FeeType("basicFee".equals(nameKey)) from $feeTypeList
        $cF : FeeType("collectiveFee".equals(nameKey)) from $feeTypeList
        $eCBF : FeeType("extraClassBasicFee".equals(nameKey)) from $feeTypeList
        $eCCF : FeeType("extraClassCollectiveFee".equals(nameKey)) from $feeTypeList
        $oAD : FeeType("onlineAppDiscount".equals(nameKey)) from $feeTypeList
        $nSF : FeeType("nationalSearchFee".equals(nameKey)) from $feeTypeList
        $mC : FeeType("maxClasses".equals(nameKey)) from $feeTypeList
    then
		# Fills the map with all the fees
        $map.put("basicFee", $bF);
        $map.put("collectiveFee", $cF);
        $map.put("extraClassBasicFee", $eCBF);
        $map.put("extraClassCollectiveFee", $eCCF);
        $map.put("onlineAppDiscount", $oAD);
        $map.put("maxClasses", $mC);
        $map.put("nationalSearchFee", $nSF);
		# Updates the information in the session
        update($map);
end

rule "Basic Fee"
no-loop
    when
        $results : HashMap()
        $map : TreeMap()
        TradeMark(markRightKind.value() == "Individual")
    then
        # Creates the base fee.
        Fee fee = new Fee();
        fee.setFeeType((FeeType) $map.get("basicFee"));
        fee.setAmount(((FeeType) $map.get("basicFee")).getDefaultValue());
        fee.setQuantity(1);
        fee.setUnitAmount(((FeeType) $map.get("basicFee")).getDefaultValue());
        # Adds the base fee to the result list
        $results.put("baseFee", fee);
end

rule "Collective Fee"
no-loop
    when
        $results : HashMap()
        $map : TreeMap()
        TradeMark(markRightKind.value() == "Collective")
    then
        # Creates the base fee.
        Fee fee = new Fee();
        fee.setFeeType((FeeType) $map.get("collectiveFee"));
        fee.setAmount(((FeeType) $map.get("collectiveFee")).getDefaultValue());
        fee.setQuantity(1);
        fee.setUnitAmount(((FeeType) $map.get("collectiveFee")).getDefaultValue());
        # Adds the base fee to the result list
        $results.put("baseFee", fee);
end

rule "Extra Classes Basic Fee"
no-loop
    when
        $results : HashMap()
        $map : TreeMap()
        TradeMark(markRightKind.value() == "Individual" &&
                    classDescriptions != null &&
                    classDescriptions.size() > ((FeeType) $map.get("maxClasses")).getDefaultValue() &&
                    $totalClasses : classDescriptions.size())
    then
        # Creates the base fee.
        Fee fee = new Fee();
        fee.setFeeType((FeeType) $map.get("extraClassBasicFee"));
        fee.setAmount(((FeeType) $map.get("extraClassBasicFee")).getDefaultValue() * ($totalClasses - ((FeeType) $map.get("maxClasses")).getDefaultValue()));
        fee.setQuantity($totalClasses - ((FeeType) $map.get("maxClasses")).getDefaultValue());
        fee.setUnitAmount(((FeeType) $map.get("extraClassBasicFee")).getDefaultValue());
        # Adds the base fee to the result list
        $results.put("extraClasses", fee);
end

rule "Extra Classes Collective Fee"
no-loop
    when
        $results : HashMap()
        $map : TreeMap()
        TradeMark(markRightKind.value() == "Collective" &&
                    classDescriptions != null &&
                    classDescriptions.size() > ((FeeType) $map.get("maxClasses")).getDefaultValue() &&
                    $totalClasses : classDescriptions.size())
    then
        # Creates the base fee.
        Fee fee = new Fee();
        fee.setFeeType((FeeType) $map.get("extraClassCollectiveFee"));
        fee.setAmount(((FeeType) $map.get("extraClassCollectiveFee")).getDefaultValue() * ($totalClasses - ((FeeType) $map.get("maxClasses")).getDefaultValue()));
        fee.setQuantity($totalClasses - ((FeeType) $map.get("maxClasses")).getDefaultValue());
        fee.setUnitAmount(((FeeType) $map.get("extraClassCollectiveFee")).getDefaultValue());
        # Adds the base fee to the result list
        $results.put("extraClasses", fee);
end

rule "National Search Fee"
no-loop
    when
        $results : HashMap()
        $map : TreeMap()
        TradeMark(nationalSearchReportIndicator == true)
    then
        # Creates the base fee.
        Fee fee = new Fee();
        fee.setFeeType((FeeType) $map.get("nationalSearchFee"));
        fee.setAmount(((FeeType) $map.get("nationalSearchFee")).getDefaultValue());
        fee.setQuantity(1);
        fee.setUnitAmount(((FeeType) $map.get("nationalSearchFee")).getDefaultValue());
        # Adds the base fee to the result list
        $results.put("nationalSearch", fee);
end

rule "Online Application Discount"
no-loop
    when
        $results : HashMap()
        $map : TreeMap()
        TradeMark()
    then
        # Creates the base fee.
        Fee fee = new Fee();
        fee.setFeeType((FeeType) $map.get("onlineAppDiscount"));
        fee.setAmount(((FeeType) $map.get("onlineAppDiscount")).getDefaultValue());
        fee.setQuantity(1);
        fee.setUnitAmount(((FeeType) $map.get("onlineAppDiscount")).getDefaultValue());
        # Adds the base fee to the result list
        $results.put("onlineAppDiscount", fee);
end

# --------------------------------------------------------------------------------
# --------------------------- RULES FOR PAYMENT PROCESS --------------------------
# --------------------------------------------------------------------------------
/*
rule "BRXXX Payment (basic and collective)"
no-loop
when
	Fee($basicFee : basicFee,
		$collectiveFee : collectiveFee,
		$extraClassFeeBasic : extraClassFeeBasic,
		$extraClassFeeCollective : extraClassFeeCollective,
		$onlineAppDiscount : onlineAppDiscount,
		$nationalSearchFee : nationalSearchFee,
		$totalClasses : totalClasses,
		$maxClasses : maxClasses)
	$map : Map()
then
	DecimalFormat formatter = new DecimalFormat("####0.00");
	modify($map){
		put("F-001", formatter.format($basicFee + $collectiveFee - $onlineAppDiscount));
	};
	
	if($totalClasses > $maxClasses){
		modify($map){
			put("F-002", formatter.format(($extraClassFeeBasic + $extraClassFeeCollective) * ($totalClasses - $maxClasses)));
		};
	}
	
	if($nationalSearchFee > 0){
		modify($map){
			put("F-003", formatter.format($nationalSearchFee));
		};
	}
end
*/
/*
 *  FspDomain:: JAXBInitiator 02/09/13 12:01 karalch $
 *  * . * .
 *  * * RRRR * Copyright Â© 2013 OHIM: Office for Harmonization
 *  * . RR R . in the Internal Market (trade marks and designs)
 *  * * RRR *
 *  * . RR RR . ALL RIGHTS RESERVED
 *  * * . _ . *
 */

package eu.ohim.sp.filing.domain.utils;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.xml.sax.SAXException;

import javax.xml.XMLConstants;
import javax.xml.bind.*;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

/**
 * Util class that provides the marshaller and unmarshaller to convert from and to
 * jaxb auto-generated classes
 *
 * @param <T> the expected output of the marshaller
 */
public class JAXBInitiator<T> {

    /**
     * Logger of {@see JAXBInitiator}
     */
    private static final Logger LOGGER = Logger.getLogger(JAXBInitiator.class);

    private JAXBContext jaxbContext;
    private Schema schema;
    private ValidationEventHandler validationEventHandler;


    /**
     * Constructor of JAXBInitiator
     *
     * @param clazz  java class to be recognized by the internal new {@link javax.xml.bind.JAXBContext}.
     * @param schema the schema location, expected on classpath
     *               If it is null, then no validation will be done
     * @throws javax.xml.bind.JAXBException
     */
    public JAXBInitiator(Class<T> clazz, String schema) throws JAXBException {
        this.jaxbContext = JAXBContext.newInstance(clazz);

        this.schema = getSchema(schema);
        this.validationEventHandler = getValidationEvent();
    }

    /**
     * Creates a {@see Marshaller} of {@see Transaction} and then caches it
     *
     * @return the {@see Marshaller}
     * @throws javax.xml.bind.JAXBException is thrown when fails to create marshaller
     */
    public Marshaller getMarshaller() throws JAXBException {
        Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setSchema(schema);
        marshaller.setEventHandler(validationEventHandler);
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

        return marshaller;
    }

    /**
     * Creates a {@see Unmarshaller} of {@see Transaction} and then caches it
     *
     * @return the {@see Unmarshaller}
     * @throws javax.xml.bind.JAXBException is thrown when fails to create unmarshaller
     */
    public Unmarshaller getUnmarshaller() throws JAXBException {
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
        unmarshaller.setSchema(schema);
        unmarshaller.setEventHandler(validationEventHandler);

        return unmarshaller;
    }

    /**
     * Provides {@see Schema} that is generated by the provided schema location
     *
     * @param schema the schema location
     * @return the {@see Schema} if it is not found then will be returned null
     */
    private Schema getSchema(String schema) {
        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        try {
            if (StringUtils.isNotBlank(schema)) {
                return sf.newSchema(getClass().getClassLoader().getResource(schema));
            }
        } catch (SAXException e) {
            LOGGER.error(e);
        }
        return null;
    }

    /**
     * Logs any validation event during the processing
     *
     * @return handler that records any validation issues
     */
    private ValidationEventHandler getValidationEvent() {
        return new ValidationEventHandler() {
            @Override
            public boolean handleEvent(ValidationEvent event) {
                LOGGER.error("\nEVENT");
                LOGGER.error("SEVERITY:  " + event.getSeverity());
                LOGGER.error("MESSAGE:  " + event.getMessage());
                LOGGER.error("LINKED EXCEPTION:  " + event.getLinkedException());
                LOGGER.error("LOCATOR");
                LOGGER.error("    LINE NUMBER:  " + event.getLocator().getLineNumber());
                LOGGER.error("    COLUMN NUMBER:  " + event.getLocator().getColumnNumber());
                LOGGER.error("    OFFSET:  " + event.getLocator().getOffset());
                LOGGER.error("    OBJECT:  " + event.getLocator().getObject());
                LOGGER.error("    NODE:  " + event.getLocator().getNode());
                LOGGER.error("    URL:  " + event.getLocator().getURL());
                return true;
            }
        };
    }
}

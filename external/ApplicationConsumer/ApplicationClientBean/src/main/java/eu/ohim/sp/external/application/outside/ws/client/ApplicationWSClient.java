
package eu.ohim.sp.external.application.outside.ws.client;

import eu.ohim.sp.external.domain.application.NumberingResult;
import eu.ohim.sp.external.domain.common.Result;
import eu.ohim.sp.external.ws.exception.ApplicationFaultException;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import javax.xml.ws.soap.SOAPBinding;

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.7-b01-
 * Generated source version: 2.1
 *
 */
@WebService(name = ApplicationWSClientService.SERVICE_NAME, targetNamespace = ApplicationWSClientService.SERVICE_NAMESPACE)
@BindingType(SOAPBinding.SOAP12HTTP_BINDING)
public interface ApplicationWSClient {

    String MODULE = "module";
    String OFFICE = "office";
    String FILING_NUMBER = "filingNumber";

    /**
     *
     * @param office
     * @param user
     * @param filingNumber
     * @return
     *     returns byte[]
     */
    @WebMethod
    @WebResult(targetNamespace = "", name = "applicationFile")
    @RequestWrapper(localName = "loadApplication", targetNamespace = ApplicationWSClientService.SERVICE_NAMESPACE, className = "LoadApplication")
    @ResponseWrapper(localName = "loadApplicationResponse", targetNamespace = ApplicationWSClientService.SERVICE_NAMESPACE, className = "LoadApplicationResponse")
    byte[] loadApplication(
            @WebParam(name = OFFICE, targetNamespace = "")
            String office,
            @WebParam(name = "user", targetNamespace = "")
            String user,
            @WebParam(name = FILING_NUMBER, targetNamespace = "")
            String filingNumber) throws ApplicationFaultException;

    /**
     *
     * @param office
     * @param user
     * @param filingNumber
     * @param
     * @return
     *     returns eu.ohim.sp.external.application.ws.client.Result
     */
    @WebMethod
    @WebResult(targetNamespace = "", name = "result")
    @RequestWrapper(localName = "saveApplication", targetNamespace = ApplicationWSClientService.SERVICE_NAMESPACE, className = "SaveApplication")
    @ResponseWrapper(localName = "saveApplicationResponse", targetNamespace = ApplicationWSClientService.SERVICE_NAMESPACE, className = "SaveApplicationResponse")
    Result saveApplication(
            @WebParam(name = OFFICE, targetNamespace = "")
            String office,
            @WebParam(name = "user", targetNamespace = "")
            String user,
            @WebParam(name = "filingNumber", targetNamespace = "")
            String filingNumber,
            @WebParam(name = "finalDraft", targetNamespace = "")
            boolean finalDraft) throws ApplicationFaultException;


    /**
     * Checks if the provided application exists already on the system,
     * under the provided information
     * @param applicationType the type of the application
     * @param formName the form name
     * @param applicationNumber the application number
     * @param registrationNumber the registration number
     * @return
     *     true if the provided application exists, otherwise no
     * @throws ApplicationFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "", name = "checkResult")
    @RequestWrapper(localName = "checkExistingApplication", targetNamespace = ApplicationWSClientService.SERVICE_NAMESPACE, className = "CheckExistingApplication")
    @ResponseWrapper(localName = "checkExistingApplicationResponse", targetNamespace = ApplicationWSClientService.SERVICE_NAMESPACE, className = "CheckExistingApplicationResponse")
    Boolean checkExistingApplication(
            @WebParam(name = "applicationType", targetNamespace = "")
            String applicationType,
            @WebParam(name = "formName", targetNamespace = "")
            String formName,
            @WebParam(name = "applicationNumber", targetNamespace = "")
            String applicationNumber,
            @WebParam(name = "registrationNumber", targetNamespace = "")
            String registrationNumber) throws ApplicationFaultException;


    /**
     *
     * @param filingNumber
     * @param applicationType
     * @return
     *     returns eu.ohim.sp.external.application.ws.client.xxx.ApplicationNumber
     * @throws ApplicationFaultException
     */
    @WebMethod
    @WebResult(targetNamespace = "", name = "numberingResult")
    @RequestWrapper(localName = "getApplicationNumber", targetNamespace = ApplicationWSClientService.SERVICE_NAMESPACE, className = "GetApplicationNumber")
    @ResponseWrapper(localName = "getApplicationNumberResponse", targetNamespace = ApplicationWSClientService.SERVICE_NAMESPACE, className = "GetApplicationNumberResponse")
    NumberingResult getApplicationNumber(
            @WebParam(name = MODULE, targetNamespace = "")
            String module,
            @WebParam(name = "applicationType", targetNamespace = "")
            String applicationType,
            @WebParam(name = "filingNumber", targetNamespace = "")
            String filingNumber)
            throws ApplicationFaultException
    ;

}

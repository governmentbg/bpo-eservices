
package eu.ohim.sp.external.person.outside.ws.client.designer;

import eu.ohim.sp.external.domain.common.Result;
import eu.ohim.sp.external.domain.person.Designer;
import eu.ohim.sp.external.person.outside.ws.client.person.PersonWSClient;
import eu.ohim.sp.external.ws.exception.DesignerFaultException;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import javax.xml.ws.soap.SOAPBinding;
import java.util.List;

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.7-b01-
 * Generated source version: 2.1
 * 
 */
@WebService(name = DesignerClientWSService.SERVICE_NAME, targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE)
@BindingType(SOAPBinding.SOAP12HTTP_BINDING)
public interface DesignerClientWS {


    /**
     * 
     * @param module
     * @param office
     * @param designer
     * @param numberOfResults
     * @return
     *     returns java.util.List<eu.ohim.sp.external.services.designer.Designer>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "matchDesigner", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "MatchDesigner")
    @ResponseWrapper(localName = "matchDesignerResponse", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "MatchDesignerResponse")
    List<Designer> matchDesigner(
        @WebParam(name = PersonWSClient.MODULE, targetNamespace = PersonWSClient.PERSON_NAMESPACE)
        String module,
        @WebParam(name = PersonWSClient.OFFICE, targetNamespace = PersonWSClient.PERSON_NAMESPACE)
        String office,
        @WebParam(name = "designer", targetNamespace = "")
        Designer designer,
        @WebParam(name = "numberOfResults", targetNamespace = "")
        int numberOfResults) throws DesignerFaultException;

    /**
     * 
     * @param module
     * @param office
     * @param user
     * @param designer
     * @return
     *     returns eu.ohim.sp.external.services.designer.Result
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "saveDesigner", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "SaveDesigner")
    @ResponseWrapper(localName = "saveDesignerResponse", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "SaveDesignerResponse")
    Result saveDesigner(
            @WebParam(name = PersonWSClient.MODULE, targetNamespace = PersonWSClient.PERSON_NAMESPACE)
        String module,
        @WebParam(name = PersonWSClient.OFFICE, targetNamespace = PersonWSClient.PERSON_NAMESPACE)
        String office,
        @WebParam(name = "user", targetNamespace = "")
        String user,
        @WebParam(name = "designer", targetNamespace = "")
        Designer designer) throws DesignerFaultException;

    /**
     * 
     * @param module
     * @param office
     * @param designerId
     * @return
     *     returns eu.ohim.sp.external.services.designer.Designer
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDesigner", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "GetDesigner")
    @ResponseWrapper(localName = "getDesignerResponse", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "GetDesignerResponse")
    Designer getDesigner(
        @WebParam(name = PersonWSClient.MODULE, targetNamespace = "")
        String module,
        @WebParam(name = PersonWSClient.OFFICE, targetNamespace = "")
        String office,
        @WebParam(name = "designerId", targetNamespace = "")
        String designerId) throws DesignerFaultException;

    /**
     * 
     * @param module
     * @param office
     * @param designerId
     * @param designerName
     * @param designerCountry
     * @param numberOfResults
     * @return
     *     returns java.util.List<eu.ohim.sp.external.services.designer.Designer>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchDesigner", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "SearchDesigner")
    @ResponseWrapper(localName = "searchDesignerResponse", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "SearchDesignerResponse")
    List<Designer> searchDesigner(
        @WebParam(name = PersonWSClient.MODULE, targetNamespace = PersonWSClient.PERSON_NAMESPACE)
        String module,
        @WebParam(name = PersonWSClient.OFFICE, targetNamespace = PersonWSClient.PERSON_NAMESPACE)
        String office,
        @WebParam(name = "designerId", targetNamespace = "")
        String designerId,
        @WebParam(name = "designerName", targetNamespace = "")
        String designerName,
        @WebParam(name = "designerCountry", targetNamespace = "")
        String designerCountry,
        @WebParam(name = "numberOfResults", targetNamespace = "")
        int numberOfResults) throws DesignerFaultException;

    /**
     * 
     * @param module
     * @param office
     * @param text
     * @param numberOfRows
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDesignerAutocomplete", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "GetDesignerAutocomplete")
    @ResponseWrapper(localName = "getDesignerAutocompleteResponse", targetNamespace = DesignerClientWSService.SERVICE_NAMESPACE, className = "GetDesignerAutocompleteResponse")
    String getDesignerAutocomplete(
           @WebParam(name = PersonWSClient.MODULE, targetNamespace = PersonWSClient.PERSON_NAMESPACE)
        String module,
        @WebParam(name = PersonWSClient.OFFICE, targetNamespace = PersonWSClient.COMMON_NAMESPACE)
        String office,
        @WebParam(name = "text", targetNamespace = PersonWSClient.COMMON_NAMESPACE)
        String text,
        @WebParam(name = "numberOfRows", targetNamespace = PersonWSClient.COMMON_NAMESPACE)
        int numberOfRows) throws DesignerFaultException;

}

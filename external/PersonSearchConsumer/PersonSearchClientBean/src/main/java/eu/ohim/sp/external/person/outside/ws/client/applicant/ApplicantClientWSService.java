
package eu.ohim.sp.external.person.outside.ws.client.applicant;

import org.apache.log4j.Logger;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.7-b01-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = ApplicantClientWSService.SERVICE_NAME, targetNamespace = ApplicantClientWSService.SERVICE_NAMESPACE, wsdlLocation = "wsdl/ApplicantService.wsdl")
public class ApplicantClientWSService extends Service {

    private static final Logger LOGGER = Logger.getLogger(ApplicantClientWSService.class);

    protected static final String SERVICE_NAMESPACE = "http://ohim.eu/sp/services/applicant/v3";
    protected static final String SERVICE_NAME = "ApplicantService";
    protected static final String PORT_NAME = "ApplicantServicePort";

    public ApplicantClientWSService(URL url) {
        super(url, new QName(SERVICE_NAMESPACE, SERVICE_NAME));
        LOGGER.debug("Connecting to : " + url);
    }
    
    /**
     * 
     * @return
     *     returns ApplicantManagementWS
     */
    @WebEndpoint(name = PORT_NAME)
    public ApplicantClientWS getManageApplicantPort() {
        return super.getPort(new QName(SERVICE_NAMESPACE, PORT_NAME), ApplicantClientWS.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ApplicantManagementWS
     */
    @WebEndpoint(name = PORT_NAME)
    public ApplicantClientWS getManageApplicantPort(WebServiceFeature... features) {
        return super.getPort(new QName(SERVICE_NAMESPACE, PORT_NAME), ApplicantClientWS.class, features);
    }

}

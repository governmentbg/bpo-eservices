package eu.ohim.sp.external.person.outside.ws.client.representative;

import org.apache.log4j.Logger;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.7-b01-
 * Generated source version: 2.1
 */
@WebServiceClient(name = RepresentativeClientWSService.SERVICE_NAME, targetNamespace = RepresentativeClientWSService.SERVICE_NAMESPACE, wsdlLocation = "wsdl/RepresentativeService.wsdl")
public class RepresentativeClientWSService extends Service {

    private static final Logger LOGGER = Logger.getLogger(RepresentativeClientWSService.class.getName());

    protected static final String SERVICE_NAMESPACE = "http://ohim.eu/sp/services/representative/v3";
    protected static final String SERVICE_NAME = "RepresentativeService";
    protected static final String PORT_NAME = "RepresentativeServicePort";

    public RepresentativeClientWSService(URL url) {
        super(url, new QName(SERVICE_NAMESPACE, SERVICE_NAME));
        LOGGER.debug("Connecting to : " + url);
    }

    /**
     * @return returns RepresentativeManagementWS
     */
    @WebEndpoint(name = PORT_NAME)
    public RepresentativeClientWS getManageRepresentativePort() {
        return super.getPort(new QName(SERVICE_NAMESPACE, PORT_NAME), RepresentativeClientWS.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns RepresentativeManagementWS
     */
    @WebEndpoint(name = PORT_NAME)
    public RepresentativeClientWS getManageRepresentativePort(WebServiceFeature... features) {
        return super.getPort(new QName(SERVICE_NAMESPACE, PORT_NAME), RepresentativeClientWS.class, features);
    }

}

package org.domain.rules;

dialect "mvel"

import eu.ohim.sp.core.domain.validation.ErrorCore;
import eu.ohim.sp.core.domain.validation.ErrorList;
import eu.ohim.sp.core.domain.payment.FeeList;
import eu.ohim.sp.core.domain.payment.FeeType;
import eu.ohim.sp.core.domain.payment.Fee;
import java.util.Map;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.List;
import java.util.Date;
import eu.ohim.sp.core.domain.design.DSeServiceApplication;
import eu.ohim.sp.core.domain.design.Design;
import eu.ohim.sp.core.domain.design.DesignApplication;

rule "Fees reader"
salience 1000
no-loop
    when
		FeeList($feeTypeList : feeTypeList)
        $bF : FeeType("basicFee".equals(nameKey)) from $feeTypeList
        $bFA : FeeType("basicFeeAfterFirst".equals(nameKey)) from $feeTypeList
        $bFC : FeeType("basicFeeComposition".equals(nameKey)) from $feeTypeList
    then
    	TreeMap map = new TreeMap();
        map.put("basicFee", $bF);
        map.put("basicFeeAfterFirst", $bFA);
        map.put("basicFeeComposition", $bFC);
        insert(map);
end

rule "Basic Fee"
no-loop
    when
        $results : HashMap()
        $map : TreeMap()
        $ds: DSeServiceApplication($dsdet: designDetails)
        eval($dsdet != null && $dsdet.size() >0)
    then
        # Creates the base fee.
        Fee fee = new Fee();
        fee.setFeeType((FeeType) $map.get("basicFee"));
        fee.setQuantity(1);
        fee.setUnitAmount(((FeeType) $map.get("basicFee")).getDefaultValue());
        fee.setAmount(fee.quantity * fee.unitAmount);
        # Adds the base fee to the result list
        $results.put("basicFee", fee);
        
        int count = 0;

        for(DesignApplication dsApp: $dsdet){
        	if(dsApp.getDesignDetails() != null && dsApp.getDesignDetails().size() >0){
        		Design d = dsApp.getDesignDetails().get(0);
	        	if(d!= null && d.getSelected() != null && d.getSelected() == true){
	        		count++;
	        	}
        	}
        }
        if(count >1){
        	Fee feeEveryOther = new Fee();
        	feeEveryOther.setFeeType((FeeType) $map.get("basicFeeAfterFirst"));
	        feeEveryOther.setQuantity(count-1);
	        feeEveryOther.setUnitAmount(((FeeType) $map.get("basicFeeAfterFirst")).getDefaultValue());
	        feeEveryOther.setAmount(feeEveryOther.quantity * feeEveryOther.unitAmount);
	        # Adds the base fee to the result list
	        $results.put("basicFeeAfterFirst", feeEveryOther);
        }
        
end
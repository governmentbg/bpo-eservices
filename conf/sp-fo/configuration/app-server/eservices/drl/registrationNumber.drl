package org.domain.rules;
dialect "mvel"
import eu.ohim.sp.core.domain.validation.ErrorCore;
import eu.ohim.sp.core.domain.validation.ErrorList;
import eu.ohim.sp.core.domain.trademark.Seniority;
import eu.ohim.sp.core.domain.validation.RulesInformation;
import eu.ohim.sp.core.configuration.domain.xsd.Sections;
import eu.ohim.sp.core.configuration.domain.xsd.Sections;
import eu.ohim.sp.core.configuration.domain.xsd.Section;
import eu.ohim.sp.core.configuration.domain.xsd.Field;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

rule "BG transformation"
salience 1000
no-loop
when
$rulesInformation : RulesInformation()
$seniority : Seniority( seniorityRegistrationNumber != null && $regNumber : seniorityRegistrationNumber &&
						seniorityCountryCode != null && seniorityCountryCode == "BG")
then
Pattern pattern = Pattern.compile("[\\d]{1,8}");
Matcher matcher = pattern.matcher($regNumber);
if(matcher.find()){
	int value = Integer.parseInt(matcher.group());
	String formatted = String.format("%08d", (int) value);
	$regNumber = matcher.replaceAll(formatted);
}
modify($seniority){
	seniorityRegistrationNumber = $regNumber
}
end

rule "DK transformation"
salience 1000
no-loop
when
$rulesInformation : RulesInformation()
$seniority : Seniority( seniorityRegistrationNumber != null && $regNumber : seniorityRegistrationNumber &&
						seniorityCountryCode != null && seniorityCountryCode == "DK")
then
pattern = Pattern.compile("([\\d]{4})[ ]([\\d]{1,5})");
matcher = pattern.matcher($regNumber);
if(matcher.find()){
	int value = Integer.parseInt(matcher.group(2));
	group2 = String.format("%05d", (int) value);
	$regNumber = matcher.replaceFirst("$1 " + group2);
}
modify($seniority){
	seniorityRegistrationNumber = $regNumber
}
end

rule "ES transformation"
salience 1000
no-loop
when
$rulesInformation : RulesInformation()
$seniority : Seniority( seniorityRegistrationNumber != null && $regNumber : seniorityRegistrationNumber &&
						seniorityCountryCode != null && seniorityCountryCode == "ES")
then
Pattern pattern = Pattern.compile("[\\d]{1,7}");
Matcher matcher = pattern.matcher($regNumber);
if(matcher.find()){
	int value = Integer.parseInt(matcher.group());
	String formatted = String.format("%07d", (int) value);
	$regNumber = matcher.replaceAll(formatted);
}
modify($seniority){
	seniorityRegistrationNumber = $regNumber
}
end

rule "LV transformation"
salience 1000
no-loop
when
$rulesInformation : RulesInformation()
$seniority : Seniority( seniorityRegistrationNumber != null && $regNumber : seniorityRegistrationNumber &&
						seniorityCountryCode != null && seniorityCountryCode == "LV")
then
pattern = Pattern.compile("([\\d]{1,3})[ ]([\\d]{1,3})");
matcher = pattern.matcher($regNumber);
if(matcher.find()){
	String group1="";
	String group2="";
	
	int value = Integer.parseInt(matcher.group(1));
	group1 = String.format("%02d", (int) value);
	value = Integer.parseInt(matcher.group(2));
	group2 = String.format("%03d", (int) value);
	$regNumber = matcher.replaceAll(group1 + " " + group2);
}
modify($seniority){
	seniorityRegistrationNumber = $regNumber
}
end

rule "RO transformation"
salience 1000
no-loop
when
$rulesInformation : RulesInformation()
$seniority : Seniority( seniorityRegistrationNumber != null && $regNumber : seniorityRegistrationNumber &&
						seniorityCountryCode != null && seniorityCountryCode == "RO")
then
Pattern pattern = Pattern.compile("[\\d]{1,6}");
Matcher matcher = pattern.matcher($regNumber);
if(matcher.find()){
	int value = Integer.parseInt(matcher.group());
	String formatted = String.format("%06d", (int) value);
	$regNumber = matcher.replaceAll(formatted);
}
modify($seniority){
	seniorityRegistrationNumber = $regNumber
}
end